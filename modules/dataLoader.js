// üîß dataLoader.js
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É

import { showUnmatched } from "./pricing.js";
import { normalizeName } from "./utils.js";
import { createMaterialRow } from "./pricing.js";
import { renderSynonymEditor } from "./editor.js";
import { recalculate } from "./pricing.js";
import { saveToServer } from "./server.js";

export let synonyms = {};
export let markupMap = {}; // üí∞ –∫–∞—Ä—Ç–∞ –Ω–∞—Ü–µ–Ω–æ–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º
export let materials = [];

console.log("‚úÖ saveToServer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");

function updateMaterialsFromDOM() {
  materials = [];
  document.querySelectorAll("#priceTable tbody tr").forEach((tr) => {
    const name = tr.dataset.name;
    const isGroup = tr.dataset.group === "true";
    if (name) {
      materials.push({ name, isGroup });
    }
  });
  console.log("üß† –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π materials –∏–∑ DOM:", materials);
}

function updateMarkupMapFromDOM() {
  markupMap = {};
  document.querySelectorAll("#priceTable tbody tr").forEach((tr) => {
    const name = tr.dataset.name;
    const isGroup = tr.dataset.group === "true";
    if (!isGroup) {
      const markup = parseFloat(tr.querySelector(".markup")?.value);
      if (!isNaN(markup)) {
        markupMap[name] = markup;
      }
    }
  });
}

// üìÑ –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏–∑ DOM
function updatePricesFromDOM() {
  const prices = {};
  document.querySelectorAll("#priceTable tbody tr").forEach((tr) => {
    const name = tr.dataset.name;
    const isGroup = tr.dataset.group === "true";
    if (!isGroup) {
      const price = parseFloat(tr.querySelector(".price-in").textContent);
      if (!isNaN(price)) {
        prices[name] = price;
      }
    }
  });
  return prices;
}

export function handleUnmatchedMaterial(name, container) {
  const div = document.createElement("div");
  div.className = "unmatched-row";

  const text = document.createElement("span");
  text.textContent = name + " ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω";
  div.appendChild(text);

  const addBtn = document.createElement("button");
  addBtn.textContent = "–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É";
  addBtn.onclick = () => {
    const newItem = { name, isGroup: false };
    materials.push(newItem);
    createMaterialRow(newItem);
    updateMarkupMapFromDOM();
    const prices = updatePricesFromDOM();
    console.log("üì¶ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ materials:", materials);
    saveToServer(materials, synonyms, prices, markupMap);
    renderSynonymEditor();
    div.remove();
  };
  div.appendChild(addBtn);

  const copyBtn = document.createElement("button");
  copyBtn.textContent = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
  copyBtn.onclick = () => {
    navigator.clipboard
      .writeText(name)
      .then(() => alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: " + name));
  };
  div.appendChild(copyBtn);

  const removeBtn = document.createElement("button");
  removeBtn.textContent = "‚úï";
  removeBtn.onclick = () => div.remove();
  div.appendChild(removeBtn);

  container.appendChild(div);
}

export function loadData() {
  console.log("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");
  fetch("http://localhost:3001/api/data")
    .then((res) => res.json())
    .then((data) => {
      console.log("üì• –û—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:", data);
      console.log("üì¶ materials –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞:", data.materials);
      if (data.materials) {
        console.log("üìé data.materials –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:", data.materials);
        materials = data.materials;
        console.log("üìå –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º materials:", materials);
        const tableBody = document
          .getElementById("priceTable")
          ?.querySelector("tbody");
        if (!tableBody) {
          console.error("–¢–∞–±–ª–∏—Ü–∞ priceTable –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
          return;
        }
        tableBody.innerHTML = "";
        console.log("üîÅ –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏:", materials);
        console.log("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ materials –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π:", materials);
        console.log(
          "üîç –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ materials –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏:",
          materials.length
        );

        materials.forEach((item) => {
          if (typeof item === "string") {
            item = { name: item, isGroup: false };
          }
          if (data.prices && data.prices[item.name]) {
            item.priceIn = data.prices[item.name];
          }
          if (data.markupMap && data.markupMap[item.name]) {
            item.markup = data.markupMap[item.name];
          }
          console.log("üì¶ –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º createMaterialRow", item);
          createMaterialRow(item);
          console.log("‚úÖ –ü–æ—Å–ª–µ createMaterialRow:", item);
        });
      }

      if (data.synonyms) synonyms = data.synonyms;
      if (data.markupMap) markupMap = data.markupMap;

      for (const name in markupMap) {
        const row = Array.from(
          document.querySelectorAll("#priceTable tbody tr")
        ).find((tr) => normalizeName(tr.dataset.name) === normalizeName(name));
        if (row) {
          const input = row.querySelector(".markup");
          if (input) {
            input.value = markupMap[name];
          }
        }
      }

      if (data.prices) {
        for (const name in data.prices) {
          const row = Array.from(
            document.querySelectorAll("#priceTable tbody tr")
          ).find(
            (tr) => normalizeName(tr.dataset.name) === normalizeName(name)
          );
          if (row) {
            row.querySelector(".price-in").textContent = data.prices[name];
            const input = row.querySelector(".markup");
            if (input) {
              const priceIn = parseFloat(data.prices[name]);
              const markup = parseFloat(input.value);
              const priceOut = priceIn + (priceIn * markup) / 100;
              const markupRub = priceOut - priceIn;
              row.querySelector(".price-out").textContent = !isNaN(priceOut)
                ? priceOut.toFixed(2)
                : "N/A";
              row.querySelector(".markup-rub").textContent = !isNaN(markupRub)
                ? markupRub.toFixed(2)
                : "N/A";
            }
          }
        }
      }

      console.log("üìä –¶–µ–Ω—ã –∏–∑ –±–∞–∑—ã:", data.prices);
      console.log("üìò –°–∏–Ω–æ–Ω–∏–º—ã –∏–∑ –±–∞–∑—ã:", data.synonyms);
      console.log("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:", materials);
      renderSynonymEditor();
    })
    .catch((err) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", err);
    });
}

export function handleFile(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    const data = new Uint8Array(e.target.result);
    const workbook = XLSX.read(data, { type: "array" });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const json = XLSX.utils.sheet_to_json(sheet);

    const unmatched = [];
    const pricesFromFile = {};

    json.forEach((row) => {
      const rawName = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"];
      const rawPrice = parseFloat(
        row["–¶–µ–Ω–∞ –≤—Ö–æ–¥"] || row["–¶–µ–Ω–∞ –ø—Ä–∏ —Å/–≤ —Å –∑–∞–≤–æ–¥–∞, —Ä—É–±. –∑–∞ 1–º2"]
      );

      if (!rawName || isNaN(rawPrice)) return;

      const normalizedName = normalizeName(rawName);
      let matched = false;

      materials.forEach((item) => {
        if (!item.isGroup) {
          const original = item.name;
          const normalizedOriginal = normalizeName(original);
          if (
            normalizedName === normalizedOriginal ||
            normalizeName(synonyms[normalizedName]) === normalizedOriginal
          ) {
            pricesFromFile[original] = rawPrice;
            matched = true;
          }
        }
      });

      if (!matched) {
        unmatched.push(rawName);
      }
    });

    document.querySelectorAll("#priceTable tbody tr").forEach((tr) => {
      const name = tr.dataset.name;
      if (pricesFromFile[name]) {
        tr.querySelector(".price-in").textContent = pricesFromFile[name];
        recalculate(tr.querySelector(".markup"));
      }
    });

    const list = document.getElementById("unmatchedList");
    if (!list) {
      console.error("–°–ø–∏—Å–æ–∫ unmatchedList –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }
    list.innerHTML = "";

    unmatched.forEach((name) => {
      handleUnmatchedMaterial(name, list);
    });
    updateMaterialsFromDOM(); // üß† –û–±–Ω–æ–≤–ª—è–µ–º materials –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    console.log("üì¶ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ materials:", materials);
    saveToServer(materials, synonyms, pricesFromFile, markupMap);
  };

  reader.readAsArrayBuffer(file);
}

// üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –µ—ë —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ

// üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
document.addEventListener("input", (e) => {
  if (e.target.classList.contains("markup")) {
    updateMarkupMapFromDOM();
    const prices = updatePricesFromDOM();
    console.log("üì¶ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ materials:", materials);
    saveToServer(materials, synonyms, prices, markupMap);
  }
});
