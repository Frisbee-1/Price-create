// üîß pricing.js
// –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã

import { addDragEvents } from "./drag.js";
import { renameGroup } from "./group.js";
import { materials } from "./dataLoader.js";

// ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
export function applyGlobalMarkup() {
  const globalValue = parseFloat(document.getElementById("globalMarkup").value);
  document.querySelectorAll(".markup").forEach((input) => {
    input.value = globalValue;
    input.dispatchEvent(new Event("change")); // –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∏–∑ –º–æ–¥—É–ª—è
export let synonyms = {};

// üîÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Excel
export function showUnmatched(unmatched) {
  const list = document.getElementById("unmatchedList");
  if (!list) return;
  list.innerHTML = "";
  unmatched.forEach((name) => {
    const div = document.createElement("div");
    div.className = "unmatched-row";
    div.textContent = name + " ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω";
    list.appendChild(div);
  });
}

// üî¢ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ –Ω–∞—Ü–µ–Ω–∫—É –≤ —Ä—É–±–ª—è—Ö
export function recalculate(input) {
  const row = input.closest("tr");
  const priceInText = row.querySelector(".price-in").textContent;
  const priceIn = parseFloat(priceInText);
  const markup = parseFloat(input.value);

  if (isNaN(priceIn) || isNaN(markup)) return; // üõë –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —á–∏—Å–ª–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º

  const priceOut = priceIn + (priceIn * markup) / 100;
  const markupRub = priceOut - priceIn;
  row.querySelector(".price-out").textContent = priceOut.toFixed(2);
  row.querySelector(".markup-rub").textContent = markupRub.toFixed(2);
}

// üß± –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
export function createMaterialRow(item) {
  try {
    console.log("üß± –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É:", item); // ü™µ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("üìå –ó–Ω–∞—á–µ–Ω–∏–µ item.priceIn:", item.priceIn);
    console.log("üìå –ó–Ω–∞—á–µ–Ω–∏–µ item.markup:", item.markup);

    const tableBody = document.getElementById("tableBody");
    if (!tableBody) {
      console.error("‚ùå tableBody –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const row = document.createElement("tr");
    row.dataset.name = item.name;
    row.dataset.group = item.isGroup;

    if (item.isGroup) {
      row.innerHTML = `
        <td class="drag-handle">‚¨ç</td>
        <td colspan="5"><h2 contenteditable="true" onblur="renameGroup(this)">${item.name}</h2></td>
      `;
    } else {
      row.innerHTML = `
        <td class="drag-handle">‚¨ç</td>
        <td contenteditable="true">${item.name}</td>
        <td class="price-in">${item.priceIn ?? ""}</td>
        <td><input type="number" class="markup" value="${
          item.markup !== undefined ? item.markup : 2
        }" /></td>
        <td class="markup-rub"></td>
        <td class="price-out"></td>
      `;
    }

    addDragEvents(row);
    tableBody.appendChild(row);

    // ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (!item.isGroup) {
      const input = row.querySelector(".markup");
      if (input) recalculate(input);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ createMaterialRow:", err);
  }
}

// üì§ –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è HTML (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è onblur –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≥—Ä—É–ø–ø—ã)
window.renameGroup = renameGroup;
