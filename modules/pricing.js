// üîß pricing.js
// –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã

import { addDragEvents } from "./drag.js";
import { renameGroup } from "./group.js";
import { materials } from "./dataLoader.js";

// ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
export function applyGlobalMarkup() {
  const globalValue = parseFloat(document.getElementById("globalMarkup").value);

  document.querySelectorAll(".markup").forEach((input) => {
    input.value = globalValue;
    recalculate(input); // –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ç—Ä–æ–∫–∏
  });

  updateAndSave(); // üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë —Ä–∞–∑–æ–º
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∏–∑ –º–æ–¥—É–ª—è
export let synonyms = {};

// üîÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Excel
export function showUnmatched(unmatched) {
  const list = document.getElementById("unmatchedList");
  if (!list) return;
  list.innerHTML = "";
  unmatched.forEach((name) => {
    const div = document.createElement("div");
    div.className = "unmatched-row";
    div.textContent = name + " ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω";
    list.appendChild(div);
  });
}

// üî¢ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ –Ω–∞—Ü–µ–Ω–∫—É –≤ —Ä—É–±–ª—è—Ö
export function recalculate(input) {
  //console.log("‚û°Ô∏è recalculate –≤—ã–∑–≤–∞–Ω–∞", input); 
  const row = input.closest("tr");
  const priceInText = row.querySelector(".price-in").textContent;
  const priceIn = parseFloat(priceInText);
  const markupInput = row.querySelector(".markup");
  const markup = parseFloat(markupInput.value);

  if (isNaN(priceIn) || isNaN(markup)) {
    row.querySelector(".markup-rub").textContent = ""; // –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    row.querySelector(".price-out").textContent = ""; // –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    return; // üõë –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —á–∏—Å–ª–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  }

  const markupRubValue = (priceIn * markup) / 100;
  const priceOutValue = priceIn + markupRubValue;

  row.querySelector(".markup-rub").textContent = markupRubValue.toFixed(2);
  row.querySelector(".price-out").textContent = priceOutValue.toFixed(2);
}

// üß± –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
export function createMaterialRow(item) {
  //console.log("üîπ createMaterialRow –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è:", item);

  // 1. –ù–∞—Ö–æ–¥–∏–º tbody –ø–æ ID (–∫–∞–∫ –≤ –≤–∞—à–µ–º HTML)
  const tableBody = document.getElementById("tableBody");
  if (!tableBody) {
    console.error("‚ùå tableBody (id='tableBody') –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  // 2. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
  const row = document.createElement("tr");
  row.dataset.name = item.name;
  row.dataset.group = item.isGroup;

  // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º HTML –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ (–≥—Ä—É–ø–ø–∞/–º–∞—Ç–µ—Ä–∏–∞–ª)
  if (item.isGroup) {
    row.innerHTML = `
      <td class="drag-handle">‚¨ç</td>
      <td colspan="5"><h2 contenteditable="true" onblur="renameGroup(this)">${item.name}</h2></td>
    `;
  } else {
    row.innerHTML = `
      <td class="drag-handle">‚¨ç</td>
      <td contenteditable="true">${item.name}</td>
      <td class="price-in">${item.priceIn ?? ""}</td>
      <td><input type="number" class="markup" value="${item.markup ?? 2}" /></td>
      <td class="markup-rub"></td>
      <td class="price-out"></td>
    `;
   
  }

  // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
  addDragEvents(row);
 tableBody.appendChild(row);

 const markupInput = row.querySelector(".markup");
 if (markupInput) {
   markupInput.addEventListener("change", () => {
     recalculate(markupInput); // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
     updateAndSave(); // üíæ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
   });
   recalculate(markupInput); // –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç
 }
}

// üì§ –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è HTML (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è onblur –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≥—Ä—É–ø–ø—ã)
window.renameGroup = renameGroup;
