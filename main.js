// üì¶ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
import { recalculate, applyGlobalMarkup } from "./modules/pricing.js";
import { renderSynonymEditor } from "./modules/editor.js";
import { loadData, handleFile, synonyms } from "./modules/dataLoader.js";
import { toggleEditMode } from "./modules/editMode.js";
import { saveToServer } from "./modules/server.js";


let dragSrcEl = null;

function normalizeName(name) {
  return name.replace(/\s+/g, " ").replace(/,/g, ".").trim();
}

function addDragEvents(row) {
  row.setAttribute("draggable", "true");
  row.addEventListener("dragstart", handleDragStart);
  row.addEventListener("dragover", handleDragOver);
  row.addEventListener("dragleave", handleDragLeave);
  row.addEventListener("drop", handleDrop);
}

function handleDragStart(e) {
  dragSrcEl = this;
  e.dataTransfer.effectAllowed = "move";
  e.dataTransfer.setData("text/html", this.innerHTML);
}


function handleDragOver(e) {
  if (e.preventDefault) e.preventDefault();
  this.classList.add("drag-over");
  return false;
}

function handleDragLeave() {
  this.classList.remove("drag-over");
}

function handleDrop(e) {
  if (e.stopPropagation) e.stopPropagation();
  if (dragSrcEl !== this) {
    const draggedIndex = [
      ...document.getElementById("tableBody").children,
    ].indexOf(dragSrcEl);
    const targetIndex = [
      ...document.getElementById("tableBody").children,
    ].indexOf(this);
    const tableBody = document.getElementById("tableBody");
    tableBody.insertBefore(
      dragSrcEl,
      targetIndex > draggedIndex ? this.nextSibling : this
    );

    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    const newOrder = [...tableBody.querySelectorAll("tr")].map((tr) => ({
      name: tr.dataset.name,
      isGroup: tr.dataset.group === "true",
    }));
    saveToServer(newOrder, synonyms, {});
  }
  this.classList.remove("drag-over");
  return false;
}

// üì§ –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è HTML (onclick)
window.recalculate = recalculate;
window.applyGlobalMarkup = applyGlobalMarkup;

import("./modules/editor.js").then((mod) => {
  window.addSynonymField = mod.addSynonymField;
});

// üîÅ –ö–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
document.addEventListener("DOMContentLoaded", () => {
  console.log("‚è≥ DOMContentLoaded: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...");
  console.log("‚è≥ DOMContentLoaded: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...");

  const fileInput = document.getElementById("fileInput");
  if (!fileInput) {
    console.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç fileInput –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  
  fileInput.addEventListener("change", (event) => {
  console.log("üì• –°–æ–±—ã—Ç–∏–µ change: –§–∞–π–ª –≤—ã–±—Ä–∞–Ω!");
  console.log("üîç event.target:", event.target);
  handleFile(event);
  });

  loadData();
  renderSynonymEditor();

  const editBtn = document.getElementById("editToggleBtn");
  if (editBtn) {
    //–ó–ê–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –í–†–ï–ú–ï–ù–û
    //editBtn.addEventListener("click", toggleEditMode);
  }
});



//–≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏, –æ–Ω —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, –±—É–¥—Ç–æ "—á—Ç–æ-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç" –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.
/*console.log("üü° –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê: –∑–∞–ø—É—Å–∫–∞–µ–º setTimeout");

setTimeout(() => {
  console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —É–±–∏—Ä–∞–µ–º –±–ª–æ–∫.");
}, 2000);
*/


//–≠—Ç–æ—Ç –∫–æ–¥ –µ—Å–ª–∏ —Å–ª—É—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–∂–¥–µ —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏—Ç "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å?""
/*window.addEventListener("beforeunload", function (e) {
  const confirmMessage = "üîÅ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å –¥–µ–π—Å—Ç–≤–∏—è!";
  console.warn(confirmMessage);
  e.preventDefault();
  e.returnValue = confirmMessage;
  return confirmMessage;
});*/


